import asyncio
import datetime
import hashlib
from urllib.parse import quote_plus

from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

from fastapi import APIRouter, Request, Form
from fastapi.responses import RedirectResponse

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤
from common import load_data, save_data, ensure_user, templates, bot, dp

router = APIRouter()

ADMIN_ID = "1809630966"

#############################
# –¢–µ–ª–µ–≥—Ä–∞–º-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
#############################

@dp.message(Command("auction"))
async def create_auction(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /auction <–Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞> <–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)>")
        return
    try:
        idx = int(parts[1]) - 1
        start_price = int(parts[2])
        duration = int(parts[3])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞, —Ü–µ–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —á–∏—Å–ª–∞.")
        return

    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if idx < 0 or idx >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞.")
        return

    token = tokens.pop(idx)
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —É–±—Ä–∞—Ç—å
    if user.get("custom_number", {}).get("token") == token["token"]:
        del user["custom_number"]

    auction_id = hashlib.sha256(f"{message.from_user.id}{token['token']}{datetime.datetime.now()}".encode()).hexdigest()[:8]
    end_ts = (datetime.datetime.now() + datetime.timedelta(minutes=duration)).timestamp()

    auction = {
        "auction_id": auction_id,
        "seller_id": str(message.from_user.id),
        "token": token,
        "starting_price": start_price,
        "current_bid": start_price,
        "highest_bidder": None,
        "end_time": end_ts
    }
    data.setdefault("auctions", []).append(auction)
    save_data(data)

    await message.answer(
        f"üöÄ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!\n"
        f"ID: {auction_id}\n"
        f"NFT ‚Ññ{token['token']} —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å {start_price} üíé\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {datetime.datetime.fromtimestamp(end_ts):%Y-%m-%d %H:%M:%S}"
    )


@dp.message(Command("bid"))
async def bid_on_auction(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /bid <auction_id> <—Å—Ç–∞–≤–∫–∞>")
        return
    aid, amt = parts[1], parts[2]
    try:
        bid_amount = int(amt)
    except ValueError:
        await message.answer("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = load_data()
    auction = next((a for a in data.get("auctions", []) if a["auction_id"] == aid), None)
    if not auction:
        await message.answer("‚ùó –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    now = datetime.datetime.now().timestamp()
    if now > auction["end_time"]:
        await message.answer("‚ùó –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return
    if bid_amount <= auction["current_bid"]:
        await message.answer("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.")
        return

    user = ensure_user(data, str(message.from_user.id))
    if user.get("balance", 0) < bid_amount:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    prev_id = auction.get("highest_bidder")
    prev_bid = auction["current_bid"]

    if prev_id == str(message.from_user.id):
        # –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        delta = bid_amount - prev_bid
        if delta <= 0 or user["balance"] < delta:
            await message.answer("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.")
            return
        user["balance"] -= delta
    else:
        # –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏ —É–≤–µ–¥–æ–º–∏—Ç—å
        if prev_id:
            prev = ensure_user(data, prev_id)
            prev["balance"] += prev_bid
            try:
                await bot.send_message(
                    int(prev_id),
                    f"‚ö†Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {prev_bid} üíé –Ω–∞ NFT ‚Ññ{auction['token']['token']} –±—ã–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ {aid}. –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
                )
            except Exception:
                pass
        user["balance"] -= bid_amount
        auction["highest_bidder"] = str(message.from_user.id)

    auction["current_bid"] = bid_amount
    save_data(data)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bid_amount} üíé –ø—Ä–∏–Ω—è—Ç–∞ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ {aid}.")


@dp.message(Command("finish"))
async def finish_auction_bot(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /finish <auction_id>")
        return
    aid = parts[1]

    data = load_data()
    auction = next((a for a in data.get("auctions", []) if a["auction_id"] == aid), None)
    if not auction:
        await message.answer("‚ùó –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if auction["seller_id"] != str(message.from_user.id):
        await message.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∞—É–∫—Ü–∏–æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ.")
        return

    prev_id = auction.get("highest_bidder")
    prev_bid = auction["current_bid"]
    token = auction["token"]

    # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏ —É–≤–µ–¥–æ–º–∏—Ç—å
    if prev_id:
        prev = ensure_user(data, prev_id)
        prev["balance"] += prev_bid
        try:
            await bot.send_message(
                int(prev_id),
                f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω {aid} –æ—Ç–º–µ–Ω—ë–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {prev_bid} üíé –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
            )
        except Exception:
            pass

    # –≤–µ—Ä–Ω—É—Ç—å NFT –ø—Ä–æ–¥–∞–≤—Ü—É
    seller = ensure_user(data, auction["seller_id"])
    seller.setdefault("tokens", []).append(token)

    data["auctions"].remove(auction)
    save_data(data)

    await message.answer(f"üõë –ê—É–∫—Ü–∏–æ–Ω {aid} –æ—Ç–º–µ–Ω—ë–Ω. NFT ‚Ññ{token['token']} –≤–æ–∑–≤—Ä–∞—â—ë–Ω, —Å—Ç–∞–≤–∫–∞ –≤—ã–∫—É–ø—â–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")


##########################################
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
##########################################

async def check_auctions():
    while True:
        data = load_data()
        now = datetime.datetime.now().timestamp()
        to_close = [a for a in data.get("auctions", []) if now > a["end_time"]]
        for auction in to_close:
            seller = ensure_user(data, auction["seller_id"])
            winner = auction.get("highest_bidder")
            price = auction["current_bid"]
            token = auction["token"]

            if winner:
                buyer = ensure_user(data, winner)
                admin_cut = price * 5 // 100
                seller_cut = price - admin_cut
                seller["balance"] += seller_cut
                ensure_user(data, ADMIN_ID)["balance"] += admin_cut

                token.update({
                    "bought_price": price,
                    "bought_date": datetime.datetime.now().isoformat(),
                    "bought_source": "auction"
                })
                buyer.setdefault("tokens", []).append(token)

                try:
                    await bot.send_message(
                        int(winner),
                        f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω {auction['auction_id']} –∑–∞ {price} üíé. NFT ‚Ññ{token['token']} –∑–∞—á–∏—Å–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é."
                    )
                except Exception:
                    pass
            else:
                seller.setdefault("tokens", []).append(token)
                try:
                    await bot.send_message(
                        int(auction["seller_id"]),
                        f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω {auction['auction_id']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Å—Ç–∞–≤–æ–∫. NFT ‚Ññ{token['token']} –≤–æ–∑–≤—Ä–∞—â—ë–Ω."
                    )
                except Exception:
                    pass

            data["auctions"].remove(auction)
        save_data(data)
        await asyncio.sleep(30)


def register_auction_tasks(loop):
    loop.create_task(check_auctions())


##########################################
# –í–µ–±-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (FastAPI)
##########################################

@router.get("/auctions")
async def auctions_page(request: Request):
    data = load_data()
    return templates.TemplateResponse("auctions.html", {
        "request": request,
        "auctions": data.get("auctions", []),
        "users": data.get("users", {}),
        "buyer_id": request.cookies.get("user_id"),
        "info": request.query_params.get("info"),
        "error": request.query_params.get("error"),
    })


@router.post("/bid_web")
async def bid_web(request: Request, auction_id: str = Form(...), bid_amount: int = Form(...)):
    buyer_id = request.cookies.get("user_id")
    if not buyer_id:
        return RedirectResponse(f"/auctions?error={quote_plus('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')}", 303)

    data = load_data()
    auction = next((a for a in data.get("auctions", []) if a["auction_id"] == auction_id), None)
    if not auction:
        return RedirectResponse(f"/auctions?error={quote_plus('–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')}", 303)

    now = datetime.datetime.now().timestamp()
    if now > auction["end_time"]:
        return RedirectResponse(f"/auctions?error={quote_plus('–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω')}", 303)
    if bid_amount <= auction["current_bid"]:
        return RedirectResponse(f"/auctions?error={quote_plus('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ')}", 303)

    user = ensure_user(data, buyer_id)
    if user.get("balance", 0) < bid_amount:
        return RedirectResponse(f"/auctions?error={quote_plus('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}", 303)

    prev_id = auction.get("highest_bidder")
    prev_bid = auction["current_bid"]

    # –≤–µ—Ä–Ω—É—Ç—å –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    if prev_id and prev_id != buyer_id:
        prev = ensure_user(data, prev_id)
        prev["balance"] += prev_bid
        try:
            await bot.send_message(
                int(prev_id),
                f"‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ {prev_bid} üíé –Ω–∞ NFT ‚Ññ{auction['token']['token']} –ø–µ—Ä–µ–±–∏—Ç–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ {auction_id}. –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
            )
        except Exception:
            pass

    if prev_id != buyer_id:
        user["balance"] -= bid_amount
        auction["highest_bidder"] = buyer_id
    else:
        delta = bid_amount - prev_bid
        user["balance"] -= delta

    auction["current_bid"] = bid_amount
    save_data(data)
    return RedirectResponse(f"/auctions?info={quote_plus('–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')}", 303)


@router.post("/auction_create")
async def create_auction_web(request: Request,
                             token_index: int = Form(...),
                             starting_price: int = Form(...),
                             duration_minutes: int = Form(...)):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return RedirectResponse(f"/auctions?error={quote_plus('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')}", 303)
    try:
        idx = int(token_index) - 1
        start_price = int(starting_price)
        duration = int(duration_minutes)
    except ValueError:
        return RedirectResponse(f"/auctions?error={quote_plus('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π')}", 303)

    data = load_data()
    user = ensure_user(data, user_id)
    tokens = user.get("tokens", [])
    if idx < 0 or idx >= len(tokens):
        return RedirectResponse(f"/auctions?error={quote_plus('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞')}", 303)

    token = tokens.pop(idx)
    if user.get("custom_number", {}).get("token") == token["token"]:
        del user["custom_number"]

    auction_id = hashlib.sha256(f"{user_id}{token['token']}{datetime.datetime.now()}".encode()).hexdigest()[:8]
    end_ts = (datetime.datetime.now() + datetime.timedelta(minutes=duration)).timestamp()

    auction = {
        "auction_id": auction_id,
        "seller_id": user_id,
        "token": token,
        "starting_price": start_price,
        "current_bid": start_price,
        "highest_bidder": None,
        "end_time": end_ts
    }
    data.setdefault("auctions", []).append(auction)
    save_data(data)
    return RedirectResponse(f"/auctions?info={quote_plus('–ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω')}", 303)


@router.post("/finish_auction")
async def finish_auction_web(request: Request, auction_id: str = Form(...)):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return RedirectResponse(f"/auctions?error={quote_plus('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')}", 303)

    data = load_data()
    auction = next((a for a in data.get("auctions", []) if a["auction_id"] == auction_id), None)
    if not auction or auction["seller_id"] != user_id:
        return RedirectResponse(f"/auctions?error={quote_plus('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')}", 303)

    prev_id = auction.get("highest_bidder")
    prev_bid = auction["current_bid"]
    token = auction["token"]

    if prev_id:
        prev = ensure_user(data, prev_id)
        prev["balance"] += prev_bid
        try:
            await bot.send_message(
                int(prev_id),
                f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω {auction_id} –æ—Ç–º–µ–Ω—ë–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º (–≤–µ–±). –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {prev_bid} üíé –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
            )
        except Exception:
            pass

    seller = ensure_user(data, auction["seller_id"])
    seller.setdefault("tokens", []).append(token)

    data["auctions"].remove(auction)
    save_data(data)
    return RedirectResponse(f"/auctions?info={quote_plus('–ê—É–∫—Ü–∏–æ–Ω –æ—Ç–º–µ–Ω—ë–Ω, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞')}", 303)
