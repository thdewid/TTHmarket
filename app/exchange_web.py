import datetime
import uuid
from fastapi import APIRouter, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse

# –ï—Å–ª–∏ –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å common.py:
from common import load_data, save_data, ensure_user, templates, bot

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = APIRouter()

@router.get("/exchange", response_class=HTMLResponse)
async def web_exchange_form(request: Request):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    user_exchanges = [ex for ex in pending_exchanges if ex["initiator_id"] == user_id or ex["target_id"] == user_id]
    return templates.TemplateResponse("exchange.html", {
        "request": request,
        "pending_exchanges": user_exchanges,
        "current_user_id": user_id
    })
    
@router.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request,
                            user_id: str = Form(None),
                            my_index: int = Form(...),
                            target_id: str = Form(...),
                            target_index: int = Form(...)):
    # 1) –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π user_id
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)

    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    if not initiator:
        return HTMLResponse("–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)

    # 2) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ target –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    resolved_uid = None
    for uid, u in data.get("users", {}).items():
        if u.get("crossed_number", {}).get("token") == target_id:
            resolved_uid = uid
            break
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∞–Ω–æ–Ω–∏–º–∫–µ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–≤–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ ID
    if resolved_uid is None:
        resolved_uid = target_id

    target = data.get("users", {}).get(resolved_uid)
    if not target:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    my_tokens     = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.", status_code=400)
    if target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–æ–º–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", status_code=400)

    my_token     = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)

    # 4) –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã
    if initiator.get("custom_number", {}).get("token") == my_token["token"]:
        del initiator["custom_number"]
    if target.get("custom_number", {}).get("token") == target_token["token"]:
        del target["custom_number"]

    # 5) –°–æ–∑–¥–∞—ë–º pending_exchange
    exchange_id = str(uuid.uuid4())
    pending = {
        "exchange_id":     exchange_id,
        "initiator_id":    user_id,
        "target_id":       resolved_uid,
        "initiator_token": my_token,
        "target_token":    target_token,
        "timestamp":       datetime.datetime.now().isoformat(),
        "expires_at":      (datetime.datetime.now() + datetime.timedelta(hours=24)).timestamp()
    }
    data.setdefault("pending_exchanges", []).append(pending)
    save_data(data)

    # 6) –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_exchange:{exchange_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_exchange:{exchange_id}")]
    ])
    try:
        await bot.send_message(
            int(resolved_uid),
            f"üîÑ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:\n"
            f"–í–∞—à —Ç–æ–∫–µ–Ω: {target_token['token']}\n"
            f"–ù–∞ —Ç–æ–∫–µ–Ω: {my_token['token']}\n\n"
            "‚úÖ ‚Äî –ø—Ä–∏–Ω—è—Ç—å, ‚ùå ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel_exchange {exchange_id}",
            reply_markup=keyboard
        )
    except:
        # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        initiator["tokens"].append(my_token)
        target["tokens"].append(target_token)
        data["pending_exchanges"].remove(pending)
        save_data(data)
        return HTMLResponse("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞.", status_code=500)

    # 7) –û—Ç–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    return templates.TemplateResponse("exchange_pending.html", {
        "request":     request,
        "message":     f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID —Å–¥–µ–ª–∫–∏: {exchange_id}",
        "exchange_id": exchange_id,
        "expires_at":  datetime.datetime.fromtimestamp(pending["expires_at"]).strftime("%Y-%m-%d %H:%M:%S")
    })

@router.get("/accept_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def accept_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞,
    –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ (–∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –æ—Ç–¥–∞–ª–∏ –∏ –∫–∞–∫–æ–π –ø–æ–ª—É—á–∏–ª–∏).
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)

    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)

    now_ts = datetime.datetime.now().timestamp()
    if now_ts > pending.get("expires_at", 0):
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ.", status_code=400)

    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å ‚Äì —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    initiator.setdefault("tokens", []).append(pending["target_token"])
    target.setdefault("tokens", []).append(pending["initiator_token"])

    data["pending_exchanges"].remove(pending)
    save_data(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞
    try:
        await bot.send_message(
            int(pending["initiator_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –ø—Ä–∏–Ω—è—Ç.\n"
            f"–í—ã –æ—Ç–¥–∞–ª–∏ —Ç–æ–∫–µ–Ω {pending['initiator_token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω {pending['target_token']}."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É:", e)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞
    try:
        await bot.send_message(
            int(pending["target_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –ø—Ä–∏–Ω—è—Ç.\n"
            f"–í—ã –æ—Ç–¥–∞–ª–∏ —Ç–æ–∫–µ–Ω {pending['target_token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω {pending['initiator_token']}."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é:", e)

    return templates.TemplateResponse("exchange_result_modal.html", {
        "request": request,
        "title": "–û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
        "message": "–û–±–º–µ–Ω –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
        "image_url": "/static/image/confirmed.png"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    })
    
@router.get("/decline_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def decline_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)
    
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    
    data["pending_exchanges"].remove(pending)
    save_data(data)
    
    return templates.TemplateResponse("exchange_result_modal.html", {
        "request": request,
        "title": "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω",
        "message": "–û–±–º–µ–Ω –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        "image_url": "/static/image/declined.png"
    })

@router.get("/cancel_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def cancel_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞.
    –ó–¥–µ—Å—å –æ–±–º–µ–Ω –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º, –∏ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id not in [pending["initiator_id"], pending["target_id"]]:
        return HTMLResponse("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –æ–±–º–µ–Ω–µ.", status_code=403)
    
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    
    data["pending_exchanges"].remove(pending)
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    try:
        await bot.send_message(
            int(pending["initiator_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É:", e)
    
    try:
        await bot.send_message(
            int(pending["target_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é:", e)
    
    return templates.TemplateResponse("exchange_result_modal.html", {
        "request": request,
        "title": "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω",
        "message": "–û–±–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é.",
        "image_url": "/static/image/declined.png"
    })
    
@router.get("/active_deals", response_class=HTMLResponse)
async def active_deals(request: Request):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    user_exchanges = [ex for ex in pending_exchanges if ex["initiator_id"] == user_id or ex["target_id"] == user_id]
    return templates.TemplateResponse("active_deals.html", {
        "request": request,
        "pending_exchanges": user_exchanges
    })
