from aiogram import types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

from common import bot, dp, load_data, save_data

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = {"1809630966", "7053559428"}

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
PAYMENT_DETAILS = {
    "rub": "2204120118196936",
    "ton": "UQB-qPuyNz9Ib75AHe43Jz39HBlThp9Bnvcetb06OfCnhsi2"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è RUB –∏ TON).
pending_shop_payments = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop ---
@dp.message(Command("shop"))
async def shop_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∞ RUB", callback_data="shop_method:rub")],
        [InlineKeyboardButton(text="üí± –û–ø–ª–∞—Ç–∞ TON", callback_data="shop_method:ton")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –û–ø–ª–∞—Ç–∞ Stars", callback_data="shop_method:stars")]
    ])
    await message.answer("üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=keyboard)

# --- –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (callback) ---
@dp.callback_query(lambda c: c.data and c.data.startswith("shop_method:"))
async def shop_method_callback(callback_query: types.CallbackQuery):
    method = callback_query.data.split(":")[1]
    if method == "rub":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé 50 –∞–ª–º–∞–∑–æ–≤ ‚Äî 100‚ÇΩ", callback_data="shop_option:50:100:rub")],
            [InlineKeyboardButton(text="üíé 100 –∞–ª–º–∞–∑–æ–≤ ‚Äî 190‚ÇΩ", callback_data="shop_option:100:190:rub")],
            [InlineKeyboardButton(text="üíé 250 –∞–ª–º–∞–∑–æ–≤ ‚Äî 450‚ÇΩ", callback_data="shop_option:250:450:rub")]
        ])
        await callback_query.message.edit_text(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏:</b>",
            parse_mode="HTML", reply_markup=keyboard
        )
    elif method == "ton":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé 50 –∞–ª–º–∞–∑–æ–≤ ‚Äî 0.2 TON", callback_data="shop_option:50:0.2:ton")],
            [InlineKeyboardButton(text="üíé 100 –∞–ª–º–∞–∑–æ–≤ ‚Äî 0.55 TON", callback_data="shop_option:100:0.55:ton")],
            [InlineKeyboardButton(text="üíé 250 –∞–ª–º–∞–∑–æ–≤ ‚Äî 1.25 TON", callback_data="shop_option:250:1.25:ton")]
        ])
        await callback_query.message.edit_text(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ TON:</b>",
            parse_mode="HTML", reply_markup=keyboard
        )
    elif method == "stars":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé 50 –∞–ª–º–∞–∑–æ–≤ ‚Äî 50 ‚≠êÔ∏è", callback_data="shop_option:50:50:stars")],
            [InlineKeyboardButton(text="üíé 100 –∞–ª–º–∞–∑–æ–≤ ‚Äî 100 ‚≠êÔ∏è", callback_data="shop_option:100:100:stars")],
            [InlineKeyboardButton(text="üíé 250 –∞–ª–º–∞–∑–æ–≤ ‚Äî 250 ‚≠êÔ∏è", callback_data="shop_option:250:250:stars")]
        ])
        await callback_query.message.edit_text(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏:</b>",
            parse_mode="HTML", reply_markup=keyboard
        )
    await callback_query.answer()

# --- –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ (callback) ---
@dp.callback_query(lambda c: c.data and c.data.startswith("shop_option:"))
async def shop_option_callback(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: shop_option:<diamond_count>:<price>:<method>
    parts = callback_query.data.split(":")
    if len(parts) < 4:
        await callback_query.answer("‚ùó <b>–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.</b>", show_alert=True, parse_mode="HTML")
        return
    diamond_count = int(parts[1])
    price = parts[2]
    method = parts[3]
    
    if method == "stars":
        # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars ‚Äì —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        prices = [LabeledPrice(label="XTR", amount=int(price))]
        payload = f"shop_stars:{diamond_count}"
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        builder = InlineKeyboardBuilder()
        builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠êÔ∏è", pay=True)
        invoice_keyboard = builder.as_markup()
        await callback_query.message.answer_invoice(
            title="–ü–æ–∫—É–ø–∫–∞ –∞–ª–º–∞–∑–æ–≤",
            description=f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ {diamond_count} –∞–ª–º–∞–∑–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏.",
            prices=prices,
            provider_token="",  # –î–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            payload=payload,
            currency="XTR",
            reply_markup=invoice_keyboard
        )
        await callback_query.answer()
    else:
        # –î–ª—è RUB –∏ TON ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
        user_id = str(callback_query.from_user.id)
        pending_shop_payments[user_id] = {
            "diamond_count": diamond_count,
            "price": price,
            "payment_method": method,
            "processed": False,
            "processed_by": None,
            "action": None
        }
        payment_info = PAYMENT_DETAILS.get(method, "")
        text = (
            f"üéÅ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ {diamond_count} –∞–ª–º–∞–∑–æ–≤</b> –∑–∞ <code>{price}</code> "
            f"{'‚ÇΩ' if method=='rub' else 'TON'}.\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{payment_info}</code>\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã."
        )
        await callback_query.message.edit_text(text, parse_mode="HTML")
        await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã (–¥–ª—è RUB –∏ TON) ---
@dp.message(lambda message: message.photo and str(message.from_user.id) in pending_shop_payments)
async def shop_payment_screenshot(message: types.Message):
    user_id = str(message.from_user.id)
    payment_info = pending_shop_payments.get(user_id)
    if not payment_info:
        return  # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    diamond_count = payment_info["diamond_count"]
    price = payment_info["price"]
    method = payment_info["payment_method"]
    
    admin_text = (
        f"üì¢ <b>–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>!\n"
        f"üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤: <b>{diamond_count}</b>\n"
        f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method.upper()}</b>\n"
        f"üí∞ –°—É–º–º–∞: <code>{price}</code> {'‚ÇΩ' if method=='rub' else 'TON'}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b> –∏–ª–∏ <b>–æ—Ç–∫–ª–æ–Ω–∏—Ç—å</b> –¥–æ–Ω–∞—Ç."
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –î–æ–Ω–∞—Ç", callback_data=f"confirm_donation:{user_id}:{diamond_count}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –î–æ–Ω–∞—Ç", callback_data=f"reject_donation:{user_id}")
        ]
    ])
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_photo(
                chat_id=int(admin_id),
                photo=message.photo[-1].file_id,
                caption=admin_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ ---
@dp.pre_checkout_query(lambda query: query.invoice_payload.startswith("shop_stars:"))
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥—á–µ–∫-–∞—É—Ç
    await pre_checkout_query.answer(ok=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stars ---
@dp.message(lambda message: message.successful_payment and message.successful_payment.invoice_payload.startswith("shop_stars:"))
async def stars_success_payment_handler(message: types.Message):
    payload = message.successful_payment.invoice_payload
    try:
        _, diamond_count_str = payload.split(":")
        diamond_count = int(diamond_count_str)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–ª–∞—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    price = message.successful_payment.total_amount

    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if user is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –∞–ª–º–∞–∑—ã
    user["balance"] = user.get("balance", 0) + diamond_count
    save_data(data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=int(admin_id),
                text=(
                    f"üõí –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥–∞–º–∏:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{message.from_user.username or user_id}</b> (ID: <code>{user_id}</code>)\n"
                    f"–ü–æ–ª—É—á–∏–ª: <b>{diamond_count} üíé</b>\n"
                    f"–ó–∞–ø–ª–∞—Ç–∏–ª: <b>{price} ‚≠êÔ∏è</b>"
                ),
                parse_mode="HTML"
            )
        except Exception:
            pass

    # –°–æ–æ–±—â–∞–µ–º —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <code>{diamond_count}</code> –∞–ª–º–∞–∑–æ–≤.",
        parse_mode="HTML"
    )

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–¥–ª—è RUB –∏ TON) ---
@dp.callback_query(lambda c: c.data and c.data.startswith("confirm_donation:"))
async def confirm_donation_callback(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: confirm_donation:<user_id>:<diamond_count>
    parts = callback_query.data.split(":")
    if len(parts) < 3:
        await callback_query.answer("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True, parse_mode="HTML")
        return
    target_user_id = parts[1]
    diamond_count = int(parts[2])
    
    donation = pending_shop_payments.get(target_user_id)
    if not donation:
        await callback_query.answer("‚ùó –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True, parse_mode="HTML")
        return
    
    if donation["processed"]:
        await callback_query.answer(
            f"‚ùó –î–æ–Ω–∞—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {donation['processed_by']} ({donation['action']}).",
            show_alert=True, parse_mode="HTML"
        )
        return
    
    donation["processed"] = True
    donation["processed_by"] = callback_query.from_user.id
    donation["action"] = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    
    data = load_data()
    user = data.get("users", {}).get(target_user_id)
    if user is None:
        await callback_query.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True, parse_mode="HTML")
        return
    user["balance"] = user.get("balance", 0) + diamond_count
    save_data(data)
    
    try:
        await bot.send_message(
            chat_id=int(target_user_id),
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <code>{diamond_count}</code> –∞–ª–º–∞–∑–æ–≤.",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
    
    await callback_query.message.edit_caption(
        caption=f"‚úÖ –î–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <b>{callback_query.from_user.id}</b>. "
                f"<b>{diamond_count}</b> –∞–ª–º–∞–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{target_user_id}</b>.",
        parse_mode="HTML"
    )
    await callback_query.answer("‚úÖ –î–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", parse_mode="HTML")
    
    pending_shop_payments.pop(target_user_id, None)

# --- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–¥–ª—è RUB –∏ TON) ---
@dp.callback_query(lambda c: c.data and c.data.startswith("reject_donation:"))
async def reject_donation_callback(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: reject_donation:<user_id>
    parts = callback_query.data.split(":")
    if len(parts) < 2:
        await callback_query.answer("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True, parse_mode="HTML")
        return
    target_user_id = parts[1]
    
    donation = pending_shop_payments.get(target_user_id)
    if not donation:
        await callback_query.answer("‚ùó –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True, parse_mode="HTML")
        return
    
    if donation["processed"]:
        await callback_query.answer(
            f"‚ùó –î–æ–Ω–∞—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {donation['processed_by']} ({donation['action']}).",
            show_alert=True, parse_mode="HTML"
        )
        return
    
    donation["processed"] = True
    donation["processed_by"] = callback_query.from_user.id
    donation["action"] = "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
    
    try:
        await bot.send_message(
            chat_id=int(target_user_id),
            text="‚ùå –í–∞—à –¥–æ–Ω–∞—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
    
    await callback_query.message.edit_caption(
        caption=f"‚ùå –î–æ–Ω–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <b>{callback_query.from_user.id}</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_user_id}</b>.",
        parse_mode="HTML"
    )
    await callback_query.answer("‚ùå –î–æ–Ω–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.", parse_mode="HTML")
    
    pending_shop_payments.pop(target_user_id, None)
